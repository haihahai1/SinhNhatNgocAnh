// L·∫•y ph·∫ßn t·ª≠ DOM
const terminalContent = document.getElementById('terminal-content');

// --- T√ôY CH·ªàNH L·ªúI CH√öC C·ª¶A B·∫†N T·∫†I ƒê√ÇY ---
const friendName = "Nguy·ªÖn Ng·ªçc Anh n√®"; // <-- THAY T√äN B·∫†N B√à
const age = 19; // <-- THAY S·ªê TU·ªîI (ho·∫∑c ƒë·ªÉ tr·ªëng)

const lines = [
    { text: "Kh·ªüi ch·∫°y quy tr√¨nh: 'Happy_Birthday_Protocol'...", type: 'system' },
    { text: `Target: ${friendName}`, type: 'system' },
    { text: "ƒêang t·∫£i d·ªØ li·ªáu... 10%...", delay: 150 },
    { text: "ƒêang t·∫£i d·ªØ li·ªáu... 30%...", delay: 100 },
    { text: "ƒêang t·∫£i d·ªØ li·ªáu... 50%...", delay: 200 },
    { text: "ƒêang t·∫£i d·ªØ li·ªáu... 70%...", delay: 100 },
    { text: "ƒêang t·∫£i d·ªØ li·ªáu... 100%.", delay: 150 },
    { text: "Ho√†n t·∫•t t·∫£i.", type: 'system' },
    { text: "Bi√™n d·ªãch l·ªùi ch√∫c...", type: 'system' },
    { text: "...", delay: 500 },
    { text: "Deploy phi√™n b·∫£n: 'LoiChucMung' v" + age + ".0", type: 'system' },
    { text: "", delay: 500 }, // D√≤ng tr·ªëng
    { text: "--------------------------------------------------", type: 'ascii' },
    { text: `Ch√∫c m·ª´ng sinh nh·∫≠t l·∫ßn th·ª© ${age}, ${friendName}! üéÇ`, type: 'user' },
    { text: "", delay: 200 },
    { text: "Ch√∫c b·∫°n tu·ªïi m·ªõi:", type: 'user' },
    { text: "   - (feature) Th√™m nhi·ªÅu ni·ªÅm vui.", type: 'user' },
    { text: "   - (feature) Th√™m nhi·ªÅu th√†nh c√¥ng.", type: 'user' },
    { text: "   - (fix) Lo·∫°i b·ªè 100% bugs 'bu·ªìn b√£'.", type: 'user' },
    { text: "   - (refactor) S·ªõm mua ƒë∆∞·ª£c con √¥ t√¥ nh√°=)).", type: 'user' },
    { text: "", delay: 200 },
    { text: "Happy happy v√† happy birthday!", type: 'user' },
    { text: "From: [MinhHai]", type: 'user' }, // <-- THAY T√äN C·ª¶A B·∫†N
    { text: "--------------------------------------------------", type: 'ascii' },
    { text: "Quy tr√¨nh k·∫øt th√∫c. T·ª± h·ªßy tin nh·∫Øn sau...", type: 'system' },
    { text: "User $> ", type: 'prompt' } // D·∫•u nh·∫Øc l·ªánh cu·ªëi c√πng
];
// --- K·∫æT TH√öC T√ôY CH·ªàNH ---


// H√†m sleep ƒë·ªÉ t·∫°o ƒë·ªô tr·ªÖ
function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// H√†m g√µ ch·ªØ ch√≠nh
async function runTypewriter() {
    for (const line of lines) {
        const speed = line.speed || 50; // T·ªëc ƒë·ªô g√µ m·∫∑c ƒë·ªãnh
        const delay = line.delay || 0; // ƒê·ªô tr·ªÖ tr∆∞·ªõc khi g√µ d√≤ng m·ªõi

        await sleep(delay);

        // Th√™m m√†u s·∫Øc ho·∫∑c ti·ªÅn t·ªë d·ª±a tr√™n 'type'
        let prefix = "";
        let color = "";
        switch (line.type) {
            case 'system':
                prefix = "[System]: ";
                color = "color: #88aaff;"; // M√†u xanh nh·∫°t
                break;
            case 'user':
                prefix = "[User]: ";
                color = "color: #a2ffa2;"; // M√†u xanh l√°
                break;
            case 'ascii':
                color = "color: #ffde88;"; // M√†u v√†ng
                break;
            case 'prompt':
                color = "color: #f0f0f0;"; // M√†u tr·∫Øng
                break;
            default:
                color = "color: #c9d1d9;" // M√†u m·∫∑c ƒë·ªãnh
        }

        // T·∫°o ph·∫ßn t·ª≠ span cho d√≤ng m·ªõi
        const lineElement = document.createElement('span');
        if (color) {
            lineElement.style.cssText = color;
        }
        
        terminalContent.appendChild(lineElement);
        
        // B·∫Øt ƒë·∫ßu g√µ ch·ªØ
        const fullText = prefix + line.text;
        for (let i = 0; i < fullText.length; i++) {
            lineElement.textContent += fullText[i];
            // Cu·ªôn xu·ªëng d∆∞·ªõi c√πng
            terminalContent.parentNode.scrollTop = terminalContent.parentNode.scrollHeight;
            await sleep(speed);
        }

        // Th√™m con tr·ªè nh·∫•p nh√°y n·∫øu l√† d√≤ng cu·ªëi c√πng
        if (lines.indexOf(line) === lines.length - 1) {
            const cursor = document.createElement('span');
            cursor.className = 'cursor';
            cursor.textContent = '‚ñà';
            lineElement.appendChild(cursor);
        }

        // Th√™m d·∫•u xu·ªëng d√≤ng
        terminalContent.appendChild(document.createElement('br'));
    }
}

// B·∫Øt ƒë·∫ßu ch·∫°y
runTypewriter();
